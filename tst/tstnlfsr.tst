gap> F := GF(2);; clist := [One(F), One(F)];; mlist := [x_0*x_1, x_2];;
gap> nl := NLFSR(F, clist, mlist, 3);
< empty NLFSR of length 3 over GF(2),
  given by MultivarPoly = x_0*x_1+x_2> 
gap> ist := [One(F),Zero(F),Zero(F)];; LoadFSR(nl,ist);;
gap> PrintAll(nl);
NLFSR of length 3 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2 
with basis =[ Z(2)^0 ]
with initial state  =[ Z(2)^0, 0*Z(2), 0*Z(2) ]
with current state  =[ Z(2)^0, 0*Z(2), 0*Z(2) ]
after loading
with output from stage S_0
gap> FieldPoly(nl); UnderlyingField(nl); FeedbackVec(nl); OutputTap(nl);
1
GF(2)
[ Z(2)^0, Z(2)^0 ]
[ 0 ]
gap> MultivarPoly(nl); IndetList(nl); 
x_0*x_1+x_2
[ 0, 1, 2 ]
gap> RunFSR(nl);
[ 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), 
  Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, 
  Z(2)^0 ]
gap>  LoadFSR(nl, ist);; RunFSR(nl,5);
[ 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2) ]
gap>  LoadFSR(nl, ist);;B := WhichBasis(nl);; RunFSR(nl, 5,true);
		[ [ 1 ], [ 1 ], [ 0 ] ]		[ 0 ]
		[ [ 1 ], [ 1 ], [ 1 ] ]		[ 1 ]
		[ [ 0 ], [ 1 ], [ 1 ] ]		[ 1 ]
		[ [ 1 ], [ 0 ], [ 1 ] ]		[ 1 ]
		[ [ 1 ], [ 1 ], [ 0 ] ]		[ 0 ]
[ 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2) ]
gap> RunFSR(nl,  true);
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
[ Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, 
  Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, 
  Z(2)^0 ]
gap> LoadFSR(nl, ist);; RunFSR(nl, ist, 40, true);
using basis B := [ Z(2)^0 ]
elm     [ 2,    ...,0 ]  with taps  [ 0 ]
                [ [ 1 ], [ 0 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
over the threshold, will only output the first 19 elements of the sequence
[ 0*Z(2), 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 
  0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), 
  Z(2)^0, Z(2)^0 ]
gap> elmvec := [Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0];;
gap> RunFSR(nl, ist, elmvec, true);
using basis B := [ Z(2)^0 ]	
elm	[ 2,	...,0 ]  with taps  [ 0 ]
[ 0 ]		[ [ 1 ], [ 0 ], [ 0 ] ]		[ 0 ]
[ 1 ]		[ [ 0 ], [ 1 ], [ 0 ] ]		[ 0 ]
[ 0 ]		[ [ 0 ], [ 0 ], [ 1 ] ]		[ 1 ]
[ 1 ]		[ [ 1 ], [ 0 ], [ 0 ] ]		[ 0 ]
[ 1 ]		[ [ 0 ], [ 1 ], [ 0 ] ]		[ 0 ]
[ 0 ]		[ [ 0 ], [ 0 ], [ 1 ] ]		[ 1 ]
[ 1 ]		[ [ 1 ], [ 0 ], [ 0 ] ]		[ 0 ]
[ 1 ]		[ [ 0 ], [ 1 ], [ 0 ] ]		[ 0 ]
[ 1 ]		[ [ 1 ], [ 0 ], [ 1 ] ]		[ 1 ]
[ 0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2), Z(2)^0 ]
gap> clist := [One(F), One(F), One(F), One(F)];;
gap> mlist := [x_0, x_1, x_1*x_2*x_3, One(F)];;
gap> nl := NLFSR(F, clist, mlist, 4);
< empty NLFSR of length 4 over GF(2),
  given by MultivarPoly = x_1*x_2*x_3+x_0+x_1+Z(2)^0> 
gap> ist := [Zero(F),Zero(F),Zero(F),Zero(F)];; RunFSR(nl,ist, 100);
over the threshold, will only output the first 36 elements of the sequence
[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), 
  Z(2)^0, Z(2)^0, 0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2), 
  0*Z(2), 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, 
  0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 
  Z(2)^0 ]
gap> K := GF(2);; x := X(K, "x");; f:= x^4+x^3+Z(2)^0 ;;                             
gap> F := FieldExtension(K, f);;     B:= Basis(F);; 
gap> clist := [Z(2^4)^7, One(F), One(F), One(F)];;
gap> mlist := [x_0, x_1^5, x_1*x_2*x_3, One(F)];;
gap> nl := NLFSR(F, clist, mlist, 4);
< empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0> 
gap> nl := NLFSR(F, clist, mlist, 4, [0,1]);
< empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0> 
gap> nl := NLFSR(K, f,  clist, mlist, 4);
< empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0> 
gap> nl := NLFSR(K, f,  clist, mlist, 4, 2);
< empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0> 
gap> PrintAll(nl);
empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0 
with basis =[ Z(2)^0, Z(2^4)^7, Z(2^4)^14, Z(2^4)^6 ]
with initial state  =[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ]
with current state  =[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ]
after initialization 
with output from stage S_2
gap> nl := NLFSR(K, f,  clist, mlist, 4);
< empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0> 
gap> PrintAll(nl);  
empty NLFSR of length 4 over GF(2^4),
 given by MultivarPoly = x_1^5+x_1*x_2*x_3+Z(2^4)^7*x_0+Z(2)^0 
with basis =[ Z(2)^0, Z(2^4)^7, Z(2^4)^14, Z(2^4)^6 ]
with initial state  =[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ]
with current state  =[ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ]
after initialization 
with output from stage S_0
gap> K := GF(2);; x := X(K, "x");; f:= x^3+x+Z(2)^0 ;;                              
gap> F := FieldExtension(K, f);;    B:= Basis(F);; 
gap> clist := [ One(F), One(F)];;
gap> mlist := [x_0, x_0*x_1*x_2];;
gap> nl := NLFSR(F, clist, mlist, 3);
< empty NLFSR of length 3 over GF(2^3),
  given by MultivarPoly = x_0*x_1*x_2+x_0> 
gap> ist := [Zero(F),Z(2^3),One(F)];; RunFSR(nl,ist);      
[ Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), Z(2)^0, Z(2^3), 0*Z(2), 
  Z(2)^0, Z(2^3) ]
gap> ist := [Z(2^3)^2,Z(2^3),One(F)];; RunFSR(nl,ist, 20);      
[ Z(2)^0, Z(2^3), Z(2^3)^2, Z(2^3), Z(2^3)^2, Z(2^3)^3, Z(2^3)^5, Z(2^3)^5, 
  Z(2^3)^4, Z(2^3)^4, Z(2^3), Z(2^3), Z(2^3)^3, Z(2^3)^6, Z(2)^0, Z(2^3)^5, 
  Z(2^3)^3, Z(2^3)^3, Z(2)^0, Z(2^3)^4, Z(2^3) ]
gap> F := GF(2);; B:= Basis(F);;
gap> mpoly := x_0*x_1 + x_2;;
gap> nl := NLFSR(F, mpoly, 3);       
< empty NLFSR of length 3 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> nl := NLFSR(F, mpoly, 3, [2]);
< empty NLFSR of length 3 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> PrintAll(nl);
empty NLFSR of length 3 over GF(2),
  given by MultivarPoly = x_0*x_1+x_2
with basis =[ Z(2)^0 ]
with initial state  =[ 0*Z(2), 0*Z(2), 0*Z(2) ]
with current state  =[ 0*Z(2), 0*Z(2), 0*Z(2) ]
after initialization 
with output from stage S_2
gap> K := GF(2);; x := X(K, "x");; f:= x^4+x^3+Z(2)^0 ;;                                
gap> F := FieldExtension(K, f);;  B:= Basis(F);; 
gap> nl := NLFSR(K, f, mpoly, 3, [2]);                  
< empty NLFSR of length 3 over GF(2^4),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> nl := NLFSR(K, f, mpoly, 3);     
< empty NLFSR of length 3 over GF(2^4),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> K := GF(2);; x := X(K, "x");; f:= x^4+x^3+Z(2)^0 ;;                                
gap> F := FieldExtension(K, f);;  B:= Basis(F);; 
gap> n1 := NLFSR(F, x_0^3+x_1*x_0+1, 2); 
< empty NLFSR of length 2 over GF(2^4),
 given by MultivarPoly = x_0^3+x_0*x_1+Z(2)^0> 
gap> LoadFSR(n1, [Z(2^4)^3, Z(2)^0]);   
Z(2)^0
gap> LoadStepFSR(n1, [Z(2^4)^3, Z(2)^0]);
[ Z(2)^0, Z(2^4)^3 ]
gap> F := GF(2);; B:= Basis(F);;
gap> mpoly := x_0*x_1 + x_2;;
gap> nl := NLFSR(F, mpoly, 3);      
< empty NLFSR of length 3 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> ist := [Z(2)^0, Z(2)^0, Z(2)^0];;
gap> RunFSR(nl, ist, true);
using basis B := [ Z(2)^0 ]
elm     [ 2,    ...,0 ]  with taps  [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
                [ [ 1 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 0 ], [ 1 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 0 ], [ 1 ] ]         [ 1 ]
                [ [ 1 ], [ 1 ], [ 0 ] ]         [ 0 ]
[ Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, 
  Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, 
  Z(2)^0, 0*Z(2) ]
gap> K := GF(2);; x := X(K, "x");; f:= x^3+x+Z(2)^0 ;;                              
gap> F := FieldExtension(K, f);;    B:= Basis(F);; 
gap> clist := [ One(F), One(F)];;
gap> mlist := [x_0, x_0*x_1*x_2];;
gap> nl := NLFSR(F, clist, mlist, 3);;
gap> ist := [Z(2^3)^4,Z(2^3),One(F)];; RunFSR(nl,ist, 50);
[ Z(2)^0, Z(2^3), Z(2^3)^4, Z(2^3)^4, Z(2^3)^4, Z(2)^0, Z(2^3)^2, Z(2^3)^3, 
  Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), 
  Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 
  0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, 
  Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), 
  Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 0*Z(2), Z(2^3)^3, Z(2^3)^4, 
  0*Z(2), Z(2^3)^3, Z(2^3)^4 ]
gap> K := GF(2);; x := X(K, "x");; f:= x^3+x+Z(2)^0 ;;                              
gap> F := FieldExtension(K, f);;    B:= Basis(F);; 
gap> clist := [ One(F), One(F)];;
gap> mlist := [x_0, x_0*x_1*x_2];;
gap> nl := NLFSR(F, clist, mlist, 3);;
gap> ist := [Z(2^3)^4,Z(2^3),One(F)];; RunFSR(nl,ist,  5);  
[ Z(2)^0, Z(2^3), Z(2^3)^4, Z(2^3)^4, Z(2^3)^4, Z(2)^0 ]
gap> F := GF(2);; B:= Basis(F);;
gap> mpoly := x_0*x_1 + x_2;;
gap> nl := NLFSR(F, mpoly, 3);    
< empty NLFSR of length 3 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2> 
gap> ConstTermOfFSR(nl);
0*Z(2)
gap> F := GF(2);; B:= Basis(F);;
gap> mpoly := x_0*x_1 + x_2;;
gap> mpoly := x_0*x_1 + x_2 + 1;; 
gap> nl := NLFSR(F, mpoly, 5);   
< empty NLFSR of length 5 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2+Z(2)^0> 
gap> ConstTermOfFSR(nl);
Z(2)^0
gap> nl := NLFSR(F, mpoly, 5, 8);
argument tap[1]=8 is out of range 0..4, or not given => im taking S_0 instead!
< empty NLFSR of length 5 over GF(2),
 given by MultivarPoly = x_0*x_1+x_2+Z(2)^0> 
gap> K := GF(2);; x := X(K, "x");; f:= x^3+x+Z(2)^0 ;;                              
gap> F := FieldExtension(K, f);;    B:= Basis(F);; 
gap> clist := [ One(F), One(F)];;
gap> mlist := [x_0, x_0*x_1*x_2];;
gap> DegreeOfPolynomialOverField(F, clist*mlist);
3
gap> m := clist *mlist;;
gap> DegreeOfPolynomialOverField(F, m);           
3
gap> DegreeOfPolynomialOverField(F, clist,mlist);
3
gap> MonomialOverField(F, x_0^800 );             
x_0^2
gap> MonomialOverField(F, x_1*x_2^500);          
x_1*x_2^3